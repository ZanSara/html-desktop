diff --git a/webview.h b/webview.h
index b2a6f83..ad94712 100644
--- a/webview.h
+++ b/webview.h
@@ -106,6 +106,13 @@ struct webview {
   void *userdata;
 };
 
+// ##### PATCH ############
+// Included after the 'webview' definition to be able to use it into the code
+//#include "patch-for-html-desktop.h"
+static void screen_changed(GtkWidget *widget, GdkScreen *old_screen, gpointer userdata);
+static gboolean draw(GtkWidget *widget, cairo_t *cr, gpointer userdata);
+// ##### END PATCH ########
+
 enum webview_dialog_type {
   WEBVIEW_DIALOG_TYPE_OPEN = 0,
   WEBVIEW_DIALOG_TYPE_SAVE = 1,
@@ -334,6 +341,24 @@ WEBVIEW_API int webview_init(struct webview *w) {
                      G_CALLBACK(webview_context_menu_cb), w);
   }
 
+  // ######### PATCH ########################################################
+  //set_as_wallpaper(w);
+  // Make it "fullscreen" (maximized with no bar) and behind, on all desktops
+  gtk_window_set_hide_titlebar_when_maximized(GTK_WINDOW(w->priv.window), TRUE);
+  gtk_window_maximize(GTK_WINDOW(w->priv.window));
+  gtk_window_set_keep_below(GTK_WINDOW(w->priv.window), TRUE);
+  gtk_window_get_skip_taskbar_hint(GTK_WINDOW(w->priv.window));
+  gtk_window_stick(GTK_WINDOW(w->priv.window));
+
+  // Needed to achieve transparency in GTK3
+  gtk_widget_set_app_paintable(GTK_WINDOW(w->priv.window), 1);
+  gtk_widget_set_opacity(GTK_WINDOW(w->priv.window), 1);
+
+  g_signal_connect(G_OBJECT(w->priv.window), "draw", G_CALLBACK(draw), NULL);
+  g_signal_connect(G_OBJECT(w->priv.window), "screen-changed", G_CALLBACK(screen_changed), NULL);
+  screen_changed(G_OBJECT(w->priv.window), NULL, NULL);
+  // ######### END PATCH ####################################################
+
   gtk_widget_show_all(w->priv.window);
 
   webkit_web_view_run_javascript(
@@ -347,6 +372,47 @@ WEBVIEW_API int webview_init(struct webview *w) {
   return 0;
 }
 
+// ######### PATCH ########################################################
+static gboolean supports_alpha = FALSE;
+WEBVIEW_API void screen_changed(GtkWidget *widget, GdkScreen *old_screen, gpointer userdata)
+{
+    /* To check if the display supports alpha channels, get the visual */
+    GdkScreen *screen = gtk_widget_get_screen(widget);
+    GdkVisual *visual = gdk_screen_get_rgba_visual(screen);
+    if (!visual)
+    {
+        printf("Your screen does not support alpha channels!\n");
+        visual = gdk_screen_get_system_visual(screen);
+        supports_alpha = FALSE;
+    }
+    else
+    {
+        printf("Your screen supports alpha channels!\n");
+        supports_alpha = TRUE;
+    }
+    gtk_widget_set_visual(widget, visual);
+}
+
+WEBVIEW_API gboolean draw(GtkWidget *widget, cairo_t *cr, gpointer userdata)
+{
+    cairo_save (cr);
+    if (supports_alpha)
+    {
+        cairo_set_source_rgba (cr, 0.0, 0.0, 0.0, 0.0); /* transparent */
+    }
+    else
+    {
+        cairo_set_source_rgb (cr, 1.0, 1.0, 1.0); /* opaque white */
+    }
+    /* draw the background */
+    cairo_set_operator (cr, CAIRO_OPERATOR_SOURCE);
+    cairo_paint (cr);
+    cairo_restore (cr);
+    return FALSE;
+}
+// ######### END PATCH ####################################################
+
+
 WEBVIEW_API int webview_loop(struct webview *w, int blocking) {
   gtk_main_iteration_do(blocking);
   return w->priv.should_exit;
